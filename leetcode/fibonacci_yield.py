def fibonacci_yield(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b


# 使用生成器
fib_gen = fibonacci_yield(10)

# 打印前10个斐波那契数
for num in fib_gen:
    print(num)


""""
生成器是Python中的一种特殊类型的迭代器，允许你按需生成值，而不是一次性生成所有值。这种特性使得生成器在处理大量数据或实现惰性求值时非常有用。生成器函数使用`yield`关键字，而不是`return`，来返回值，并在每次迭代时暂停执行，保存当前状态，以便下次继续执行。

### 生成器的概念

- **迭代器**：是一个实现了迭代协议（即包含`__iter__()`和`__next__()`方法）的对象。生成器是迭代器的一种特殊形式，它简化了迭代器的创建过程。
- **惰性求值**：生成器在需要时才计算并返回下一个值，这样可以有效节省内存空间。
- **状态保持**：每次调用生成器时，它会从上次暂停的位置继续执行，而不是从头开始。

### 常见应用示例

以下是一个简单的生成器函数示例，用于生成斐波那契数列：

```python
def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b

# 使用生成器
fib_gen = fibonacci(10)

# 打印前10个斐波那契数
for num in fib_gen:
    print(num)
```

### 代码解释

1. **定义生成器函数**：`fibonacci(n)`是一个生成器函数，使用`yield`来逐步返回斐波那契数列中的数字。
2. **状态保持**：每次调用`yield a`时，函数会暂停，并返回当前的`a`值。下一次调用时会从暂停的位置继续执行。
3. **使用生成器**：通过循环遍历生成器对象`fib_gen`，可以逐个获取斐波那契数。

### 优势

- **内存效率**：由于生成器只在需要时计算下一个值，因此在处理大型数据集时更加高效。
- **简洁代码**：使用生成器可以减少代码复杂度，特别是在处理流数据或无限序列时。

### 总结

掌握生成器的概念和用法，可以帮助你在Python编程中更有效地处理数据和实现复杂的逻辑。通过使用`yield`，你可以创建高效、可读性强的代码。

"""
